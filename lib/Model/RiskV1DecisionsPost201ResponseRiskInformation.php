<?php
/**
 * RiskV1DecisionsPost201ResponseRiskInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * RiskV1DecisionsPost201ResponseRiskInformation Class Doc Comment
 *
 * @category    Class
 * @description Contains the result of risk assessment.
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RiskV1DecisionsPost201ResponseRiskInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'riskV1DecisionsPost201Response_riskInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'profile' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationProfile',
        'rules' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationRules[]',
        'infoCodes' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationInfoCodes',
        'velocity' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationVelocity',
        'casePriority' => 'int',
        'localTime' => 'string',
        'paymentInformation' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationPaymentInformation',
        'score' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationScore',
        'ipAddress' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationIpAddress',
        'providers' => '\CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationProviders'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'profile' => null,
        'rules' => null,
        'infoCodes' => null,
        'velocity' => null,
        'casePriority' => null,
        'localTime' => null,
        'paymentInformation' => null,
        'score' => null,
        'ipAddress' => null,
        'providers' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'profile' => 'profile',
        'rules' => 'rules',
        'infoCodes' => 'infoCodes',
        'velocity' => 'velocity',
        'casePriority' => 'casePriority',
        'localTime' => 'localTime',
        'paymentInformation' => 'paymentInformation',
        'score' => 'score',
        'ipAddress' => 'ipAddress',
        'providers' => 'providers'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'profile' => 'setProfile',
        'rules' => 'setRules',
        'infoCodes' => 'setInfoCodes',
        'velocity' => 'setVelocity',
        'casePriority' => 'setCasePriority',
        'localTime' => 'setLocalTime',
        'paymentInformation' => 'setPaymentInformation',
        'score' => 'setScore',
        'ipAddress' => 'setIpAddress',
        'providers' => 'setProviders'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'profile' => 'getProfile',
        'rules' => 'getRules',
        'infoCodes' => 'getInfoCodes',
        'velocity' => 'getVelocity',
        'casePriority' => 'getCasePriority',
        'localTime' => 'getLocalTime',
        'paymentInformation' => 'getPaymentInformation',
        'score' => 'getScore',
        'ipAddress' => 'getIpAddress',
        'providers' => 'getProviders'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['rules'] = isset($data['rules']) ? $data['rules'] : null;
        $this->container['infoCodes'] = isset($data['infoCodes']) ? $data['infoCodes'] : null;
        $this->container['velocity'] = isset($data['velocity']) ? $data['velocity'] : null;
        $this->container['casePriority'] = isset($data['casePriority']) ? $data['casePriority'] : null;
        $this->container['localTime'] = isset($data['localTime']) ? $data['localTime'] : null;
        $this->container['paymentInformation'] = isset($data['paymentInformation']) ? $data['paymentInformation'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['ipAddress'] = isset($data['ipAddress']) ? $data['ipAddress'] : null;
        $this->container['providers'] = isset($data['providers']) ? $data['providers'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['localTime']) && (strlen($this->container['localTime']) > 255)) {
            $invalid_properties[] = "invalid value for 'localTime', the character length must be smaller than or equal to 255.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['localTime']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets profile
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationProfile $profile
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets rules
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationRules[]
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationRules[] $rules
     * @return $this
     */
    public function setRules($rules)
    {
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets infoCodes
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationInfoCodes
     */
    public function getInfoCodes()
    {
        return $this->container['infoCodes'];
    }

    /**
     * Sets infoCodes
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationInfoCodes $infoCodes
     * @return $this
     */
    public function setInfoCodes($infoCodes)
    {
        $this->container['infoCodes'] = $infoCodes;

        return $this;
    }

    /**
     * Gets velocity
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationVelocity
     */
    public function getVelocity()
    {
        return $this->container['velocity'];
    }

    /**
     * Sets velocity
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationVelocity $velocity
     * @return $this
     */
    public function setVelocity($velocity)
    {
        $this->container['velocity'] = $velocity;

        return $this;
    }

    /**
     * Gets casePriority
     * @return int
     */
    public function getCasePriority()
    {
        return $this->container['casePriority'];
    }

    /**
     * Sets casePriority
     * @param int $casePriority You receive this field only if you subscribe to the Enhanced Case Management service. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/) - Look for 'Reply Fields': \"decisionReply_casePriority\".
     * @return $this
     */
    public function setCasePriority($casePriority)
    {
        $this->container['casePriority'] = $casePriority;

        return $this;
    }

    /**
     * Gets localTime
     * @return string
     */
    public function getLocalTime()
    {
        return $this->container['localTime'];
    }

    /**
     * Sets localTime
     * @param string $localTime The customer's local time (hh:mm:ss), which is calculated from the transaction request time and the customer's billing address.
     * @return $this
     */
    public function setLocalTime($localTime)
    {
        if (!is_null($localTime) && (strlen($localTime) > 255)) {
            throw new \InvalidArgumentException('invalid length for $localTime when calling RiskV1DecisionsPost201ResponseRiskInformation., must be smaller than or equal to 255.');
        }

        $this->container['localTime'] = $localTime;

        return $this;
    }

    /**
     * Gets paymentInformation
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationPaymentInformation
     */
    public function getPaymentInformation()
    {
        return $this->container['paymentInformation'];
    }

    /**
     * Sets paymentInformation
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationPaymentInformation $paymentInformation
     * @return $this
     */
    public function setPaymentInformation($paymentInformation)
    {
        $this->container['paymentInformation'] = $paymentInformation;

        return $this;
    }

    /**
     * Gets score
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationScore
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationScore $score
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets ipAddress
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationIpAddress
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationIpAddress $ipAddress
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets providers
     * @return \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationProviders
     */
    public function getProviders()
    {
        return $this->container['providers'];
    }

    /**
     * Sets providers
     * @param \CyberSource\Model\RiskV1DecisionsPost201ResponseRiskInformationProviders $providers
     * @return $this
     */
    public function setProviders($providers)
    {
        $this->container['providers'] = $providers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


