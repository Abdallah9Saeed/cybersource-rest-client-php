<?php
/**
 * ReportingV3ReportsGet200ResponseReports
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Flex API
 *
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * ReportingV3ReportsGet200ResponseReports Class Doc Comment
 *
 * @category    Class
 * @description Report Search Result Bean
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReportingV3ReportsGet200ResponseReports implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'reportingV3ReportsGet200Response_reports';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reportDefinitionId' => 'string',
        'reportName' => 'string',
        'reportMimeType' => 'string',
        'reportFrequency' => 'string',
        'status' => 'string',
        'reportStartTime' => '\DateTime',
        'reportEndTime' => '\DateTime',
        'timezone' => 'string',
        'reportId' => 'string',
        'organizationId' => 'string',
        'queuedTime' => '\DateTime',
        'reportGeneratingTime' => '\DateTime',
        'reportCompletedTime' => '\DateTime',
        'subscriptionType' => 'string',
        'groupId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reportDefinitionId' => null,
        'reportName' => null,
        'reportMimeType' => null,
        'reportFrequency' => null,
        'status' => null,
        'reportStartTime' => 'date-time',
        'reportEndTime' => 'date-time',
        'timezone' => null,
        'reportId' => null,
        'organizationId' => null,
        'queuedTime' => 'date-time',
        'reportGeneratingTime' => 'date-time',
        'reportCompletedTime' => 'date-time',
        'subscriptionType' => null,
        'groupId' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'reportDefinitionId' => 'reportDefinitionId',
        'reportName' => 'reportName',
        'reportMimeType' => 'reportMimeType',
        'reportFrequency' => 'reportFrequency',
        'status' => 'status',
        'reportStartTime' => 'reportStartTime',
        'reportEndTime' => 'reportEndTime',
        'timezone' => 'timezone',
        'reportId' => 'reportId',
        'organizationId' => 'organizationId',
        'queuedTime' => 'queuedTime',
        'reportGeneratingTime' => 'reportGeneratingTime',
        'reportCompletedTime' => 'reportCompletedTime',
        'subscriptionType' => 'subscriptionType',
        'groupId' => 'groupId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'reportDefinitionId' => 'setReportDefinitionId',
        'reportName' => 'setReportName',
        'reportMimeType' => 'setReportMimeType',
        'reportFrequency' => 'setReportFrequency',
        'status' => 'setStatus',
        'reportStartTime' => 'setReportStartTime',
        'reportEndTime' => 'setReportEndTime',
        'timezone' => 'setTimezone',
        'reportId' => 'setReportId',
        'organizationId' => 'setOrganizationId',
        'queuedTime' => 'setQueuedTime',
        'reportGeneratingTime' => 'setReportGeneratingTime',
        'reportCompletedTime' => 'setReportCompletedTime',
        'subscriptionType' => 'setSubscriptionType',
        'groupId' => 'setGroupId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'reportDefinitionId' => 'getReportDefinitionId',
        'reportName' => 'getReportName',
        'reportMimeType' => 'getReportMimeType',
        'reportFrequency' => 'getReportFrequency',
        'status' => 'getStatus',
        'reportStartTime' => 'getReportStartTime',
        'reportEndTime' => 'getReportEndTime',
        'timezone' => 'getTimezone',
        'reportId' => 'getReportId',
        'organizationId' => 'getOrganizationId',
        'queuedTime' => 'getQueuedTime',
        'reportGeneratingTime' => 'getReportGeneratingTime',
        'reportCompletedTime' => 'getReportCompletedTime',
        'subscriptionType' => 'getSubscriptionType',
        'groupId' => 'getGroupId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REPORT_MIME_TYPE_APPLICATIONXML = 'application/xml';
    const REPORT_MIME_TYPE_TEXTCSV = 'text/csv';
    const REPORT_FREQUENCY_DAILY = 'DAILY';
    const REPORT_FREQUENCY_WEEKLY = 'WEEKLY';
    const REPORT_FREQUENCY_MONTHLY = 'MONTHLY';
    const REPORT_FREQUENCY_ADHOC = 'ADHOC';
    const STATUS_COMPLETED = 'COMPLETED';
    const STATUS_PENDING = 'PENDING';
    const STATUS_QUEUED = 'QUEUED';
    const STATUS_RUNNING = 'RUNNING';
    const STATUS_ERROR = 'ERROR';
    const STATUS_NO_DATA = 'NO_DATA';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getReportMimeTypeAllowableValues()
    {
        return [
            self::REPORT_MIME_TYPE_APPLICATIONXML,
            self::REPORT_MIME_TYPE_TEXTCSV,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getReportFrequencyAllowableValues()
    {
        return [
            self::REPORT_FREQUENCY_DAILY,
            self::REPORT_FREQUENCY_WEEKLY,
            self::REPORT_FREQUENCY_MONTHLY,
            self::REPORT_FREQUENCY_ADHOC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_PENDING,
            self::STATUS_QUEUED,
            self::STATUS_RUNNING,
            self::STATUS_ERROR,
            self::STATUS_NO_DATA,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reportDefinitionId'] = isset($data['reportDefinitionId']) ? $data['reportDefinitionId'] : null;
        $this->container['reportName'] = isset($data['reportName']) ? $data['reportName'] : null;
        $this->container['reportMimeType'] = isset($data['reportMimeType']) ? $data['reportMimeType'] : null;
        $this->container['reportFrequency'] = isset($data['reportFrequency']) ? $data['reportFrequency'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['reportStartTime'] = isset($data['reportStartTime']) ? $data['reportStartTime'] : null;
        $this->container['reportEndTime'] = isset($data['reportEndTime']) ? $data['reportEndTime'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['reportId'] = isset($data['reportId']) ? $data['reportId'] : null;
        $this->container['organizationId'] = isset($data['organizationId']) ? $data['organizationId'] : null;
        $this->container['queuedTime'] = isset($data['queuedTime']) ? $data['queuedTime'] : null;
        $this->container['reportGeneratingTime'] = isset($data['reportGeneratingTime']) ? $data['reportGeneratingTime'] : null;
        $this->container['reportCompletedTime'] = isset($data['reportCompletedTime']) ? $data['reportCompletedTime'] : null;
        $this->container['subscriptionType'] = isset($data['subscriptionType']) ? $data['subscriptionType'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getReportMimeTypeAllowableValues();
        if (!in_array($this->container['reportMimeType'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'reportMimeType', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getReportFrequencyAllowableValues();
        if (!in_array($this->container['reportFrequency'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'reportFrequency', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getReportMimeTypeAllowableValues();
        if (!in_array($this->container['reportMimeType'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getReportFrequencyAllowableValues();
        if (!in_array($this->container['reportFrequency'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets reportDefinitionId
     * @return string
     */
    public function getReportDefinitionId()
    {
        return $this->container['reportDefinitionId'];
    }

    /**
     * Sets reportDefinitionId
     * @param string $reportDefinitionId Unique Report Identifier of each report type
     * @return $this
     */
    public function setReportDefinitionId($reportDefinitionId)
    {
        $this->container['reportDefinitionId'] = $reportDefinitionId;

        return $this;
    }

    /**
     * Gets reportName
     * @return string
     */
    public function getReportName()
    {
        return $this->container['reportName'];
    }

    /**
     * Sets reportName
     * @param string $reportName Name of the report specified by merchant while creating the report
     * @return $this
     */
    public function setReportName($reportName)
    {
        $this->container['reportName'] = $reportName;

        return $this;
    }

    /**
     * Gets reportMimeType
     * @return string
     */
    public function getReportMimeType()
    {
        return $this->container['reportMimeType'];
    }

    /**
     * Sets reportMimeType
     * @param string $reportMimeType Format of the report to get generated
     * @return $this
     */
    public function setReportMimeType($reportMimeType)
    {
        $allowed_values = $this->getReportMimeTypeAllowableValues();
        if (!is_null($reportMimeType) && !in_array($reportMimeType, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reportMimeType', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['reportMimeType'] = $reportMimeType;

        return $this;
    }

    /**
     * Gets reportFrequency
     * @return string
     */
    public function getReportFrequency()
    {
        return $this->container['reportFrequency'];
    }

    /**
     * Sets reportFrequency
     * @param string $reportFrequency Frequency of the report to get generated
     * @return $this
     */
    public function setReportFrequency($reportFrequency)
    {
        $allowed_values = $this->getReportFrequencyAllowableValues();
        if (!is_null($reportFrequency) && !in_array($reportFrequency, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reportFrequency', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['reportFrequency'] = $reportFrequency;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the report
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reportStartTime
     * @return \DateTime
     */
    public function getReportStartTime()
    {
        return $this->container['reportStartTime'];
    }

    /**
     * Sets reportStartTime
     * @param \DateTime $reportStartTime Specifies the report start time in ISO 8601 format
     * @return $this
     */
    public function setReportStartTime($reportStartTime)
    {
        $this->container['reportStartTime'] = $reportStartTime;

        return $this;
    }

    /**
     * Gets reportEndTime
     * @return \DateTime
     */
    public function getReportEndTime()
    {
        return $this->container['reportEndTime'];
    }

    /**
     * Sets reportEndTime
     * @param \DateTime $reportEndTime Specifies the report end time in ISO 8601 format
     * @return $this
     */
    public function setReportEndTime($reportEndTime)
    {
        $this->container['reportEndTime'] = $reportEndTime;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone Time Zone
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets reportId
     * @return string
     */
    public function getReportId()
    {
        return $this->container['reportId'];
    }

    /**
     * Sets reportId
     * @param string $reportId Unique identifier generated for every reports
     * @return $this
     */
    public function setReportId($reportId)
    {
        $this->container['reportId'] = $reportId;

        return $this;
    }

    /**
     * Gets organizationId
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     * @param string $organizationId CyberSource Merchant Id
     * @return $this
     */
    public function setOrganizationId($organizationId)
    {
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets queuedTime
     * @return \DateTime
     */
    public function getQueuedTime()
    {
        return $this->container['queuedTime'];
    }

    /**
     * Sets queuedTime
     * @param \DateTime $queuedTime Specifies the time of the report in queued  in ISO 8601 format
     * @return $this
     */
    public function setQueuedTime($queuedTime)
    {
        $this->container['queuedTime'] = $queuedTime;

        return $this;
    }

    /**
     * Gets reportGeneratingTime
     * @return \DateTime
     */
    public function getReportGeneratingTime()
    {
        return $this->container['reportGeneratingTime'];
    }

    /**
     * Sets reportGeneratingTime
     * @param \DateTime $reportGeneratingTime Specifies the time of the report started to generate  in ISO 8601 format
     * @return $this
     */
    public function setReportGeneratingTime($reportGeneratingTime)
    {
        $this->container['reportGeneratingTime'] = $reportGeneratingTime;

        return $this;
    }

    /**
     * Gets reportCompletedTime
     * @return \DateTime
     */
    public function getReportCompletedTime()
    {
        return $this->container['reportCompletedTime'];
    }

    /**
     * Sets reportCompletedTime
     * @param \DateTime $reportCompletedTime Specifies the time of the report completed the generation  in ISO 8601 format
     * @return $this
     */
    public function setReportCompletedTime($reportCompletedTime)
    {
        $this->container['reportCompletedTime'] = $reportCompletedTime;

        return $this;
    }

    /**
     * Gets subscriptionType
     * @return string
     */
    public function getSubscriptionType()
    {
        return $this->container['subscriptionType'];
    }

    /**
     * Sets subscriptionType
     * @param string $subscriptionType Specifies whether the subscription created is either Custom, Standard or Classic
     * @return $this
     */
    public function setSubscriptionType($subscriptionType)
    {
        $this->container['subscriptionType'] = $subscriptionType;

        return $this;
    }

    /**
     * Gets groupId
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     * @param string $groupId Id for selected group.
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


