<?php
/**
 * Riskv1authenticationresultsConsumerAuthenticationInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Riskv1authenticationresultsConsumerAuthenticationInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Riskv1authenticationresultsConsumerAuthenticationInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'riskv1authenticationresults_consumerAuthenticationInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acsRenderingType' => 'string',
        'acsTransactionId' => 'string',
        'authenticationTransactionId' => 'string',
        'authenticationType' => 'string',
        'challengeCancelCode' => 'string',
        'effectiveAuthenticationType' => 'string',
        'directoryServerErrorCode' => 'string',
        'directoryServerErrorDescription' => 'string',
        'interactionCounter' => 'string',
        'signedParesStatusReason' => 'string',
        'sdkTransactionId' => 'string',
        'signedPares' => 'string',
        'threeDSServerTransactionId' => 'string',
        'whiteListStatus' => 'string',
        'whiteListStatusSource' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acsRenderingType' => null,
        'acsTransactionId' => null,
        'authenticationTransactionId' => null,
        'authenticationType' => null,
        'challengeCancelCode' => null,
        'effectiveAuthenticationType' => null,
        'directoryServerErrorCode' => null,
        'directoryServerErrorDescription' => null,
        'interactionCounter' => null,
        'signedParesStatusReason' => null,
        'sdkTransactionId' => null,
        'signedPares' => null,
        'threeDSServerTransactionId' => null,
        'whiteListStatus' => null,
        'whiteListStatusSource' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'acsRenderingType' => 'acsRenderingType',
        'acsTransactionId' => 'acsTransactionId',
        'authenticationTransactionId' => 'authenticationTransactionId',
        'authenticationType' => 'authenticationType',
        'challengeCancelCode' => 'challengeCancelCode',
        'effectiveAuthenticationType' => 'effectiveAuthenticationType',
        'directoryServerErrorCode' => 'directoryServerErrorCode',
        'directoryServerErrorDescription' => 'directoryServerErrorDescription',
        'interactionCounter' => 'interactionCounter',
        'signedParesStatusReason' => 'signedParesStatusReason',
        'sdkTransactionId' => 'sdkTransactionId',
        'signedPares' => 'signedPares',
        'threeDSServerTransactionId' => 'threeDSServerTransactionId',
        'whiteListStatus' => 'whiteListStatus',
        'whiteListStatusSource' => 'whiteListStatusSource'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'acsRenderingType' => 'setAcsRenderingType',
        'acsTransactionId' => 'setAcsTransactionId',
        'authenticationTransactionId' => 'setAuthenticationTransactionId',
        'authenticationType' => 'setAuthenticationType',
        'challengeCancelCode' => 'setChallengeCancelCode',
        'effectiveAuthenticationType' => 'setEffectiveAuthenticationType',
        'directoryServerErrorCode' => 'setDirectoryServerErrorCode',
        'directoryServerErrorDescription' => 'setDirectoryServerErrorDescription',
        'interactionCounter' => 'setInteractionCounter',
        'signedParesStatusReason' => 'setSignedParesStatusReason',
        'sdkTransactionId' => 'setSdkTransactionId',
        'signedPares' => 'setSignedPares',
        'threeDSServerTransactionId' => 'setThreeDSServerTransactionId',
        'whiteListStatus' => 'setWhiteListStatus',
        'whiteListStatusSource' => 'setWhiteListStatusSource'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'acsRenderingType' => 'getAcsRenderingType',
        'acsTransactionId' => 'getAcsTransactionId',
        'authenticationTransactionId' => 'getAuthenticationTransactionId',
        'authenticationType' => 'getAuthenticationType',
        'challengeCancelCode' => 'getChallengeCancelCode',
        'effectiveAuthenticationType' => 'getEffectiveAuthenticationType',
        'directoryServerErrorCode' => 'getDirectoryServerErrorCode',
        'directoryServerErrorDescription' => 'getDirectoryServerErrorDescription',
        'interactionCounter' => 'getInteractionCounter',
        'signedParesStatusReason' => 'getSignedParesStatusReason',
        'sdkTransactionId' => 'getSdkTransactionId',
        'signedPares' => 'getSignedPares',
        'threeDSServerTransactionId' => 'getThreeDSServerTransactionId',
        'whiteListStatus' => 'getWhiteListStatus',
        'whiteListStatusSource' => 'getWhiteListStatusSource'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acsRenderingType'] = isset($data['acsRenderingType']) ? $data['acsRenderingType'] : null;
        $this->container['acsTransactionId'] = isset($data['acsTransactionId']) ? $data['acsTransactionId'] : null;
        $this->container['authenticationTransactionId'] = isset($data['authenticationTransactionId']) ? $data['authenticationTransactionId'] : null;
        $this->container['authenticationType'] = isset($data['authenticationType']) ? $data['authenticationType'] : null;
        $this->container['challengeCancelCode'] = isset($data['challengeCancelCode']) ? $data['challengeCancelCode'] : null;
        $this->container['effectiveAuthenticationType'] = isset($data['effectiveAuthenticationType']) ? $data['effectiveAuthenticationType'] : null;
        $this->container['directoryServerErrorCode'] = isset($data['directoryServerErrorCode']) ? $data['directoryServerErrorCode'] : null;
        $this->container['directoryServerErrorDescription'] = isset($data['directoryServerErrorDescription']) ? $data['directoryServerErrorDescription'] : null;
        $this->container['interactionCounter'] = isset($data['interactionCounter']) ? $data['interactionCounter'] : null;
        $this->container['signedParesStatusReason'] = isset($data['signedParesStatusReason']) ? $data['signedParesStatusReason'] : null;
        $this->container['sdkTransactionId'] = isset($data['sdkTransactionId']) ? $data['sdkTransactionId'] : null;
        $this->container['signedPares'] = isset($data['signedPares']) ? $data['signedPares'] : null;
        $this->container['threeDSServerTransactionId'] = isset($data['threeDSServerTransactionId']) ? $data['threeDSServerTransactionId'] : null;
        $this->container['whiteListStatus'] = isset($data['whiteListStatus']) ? $data['whiteListStatus'] : null;
        $this->container['whiteListStatusSource'] = isset($data['whiteListStatusSource']) ? $data['whiteListStatusSource'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['acsTransactionId']) && (strlen($this->container['acsTransactionId']) > 36)) {
            $invalid_properties[] = "invalid value for 'acsTransactionId', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['authenticationTransactionId']) && (strlen($this->container['authenticationTransactionId']) > 20)) {
            $invalid_properties[] = "invalid value for 'authenticationTransactionId', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['authenticationType']) && (strlen($this->container['authenticationType']) > 2)) {
            $invalid_properties[] = "invalid value for 'authenticationType', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['challengeCancelCode']) && (strlen($this->container['challengeCancelCode']) > 2)) {
            $invalid_properties[] = "invalid value for 'challengeCancelCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['effectiveAuthenticationType']) && (strlen($this->container['effectiveAuthenticationType']) > 2)) {
            $invalid_properties[] = "invalid value for 'effectiveAuthenticationType', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['directoryServerErrorCode']) && (strlen($this->container['directoryServerErrorCode']) > 3)) {
            $invalid_properties[] = "invalid value for 'directoryServerErrorCode', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['directoryServerErrorDescription']) && (strlen($this->container['directoryServerErrorDescription']) > 4096)) {
            $invalid_properties[] = "invalid value for 'directoryServerErrorDescription', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['interactionCounter']) && (strlen($this->container['interactionCounter']) > 2)) {
            $invalid_properties[] = "invalid value for 'interactionCounter', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['signedParesStatusReason']) && (strlen($this->container['signedParesStatusReason']) > 2)) {
            $invalid_properties[] = "invalid value for 'signedParesStatusReason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sdkTransactionId']) && (strlen($this->container['sdkTransactionId']) > 36)) {
            $invalid_properties[] = "invalid value for 'sdkTransactionId', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['signedPares'] === null) {
            $invalid_properties[] = "'signedPares' can't be null";
        }
        if (!is_null($this->container['threeDSServerTransactionId']) && (strlen($this->container['threeDSServerTransactionId']) > 36)) {
            $invalid_properties[] = "invalid value for 'threeDSServerTransactionId', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['whiteListStatus']) && (strlen($this->container['whiteListStatus']) > 1)) {
            $invalid_properties[] = "invalid value for 'whiteListStatus', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['whiteListStatusSource']) && (strlen($this->container['whiteListStatusSource']) > 2)) {
            $invalid_properties[] = "invalid value for 'whiteListStatusSource', the character length must be smaller than or equal to 2.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['acsTransactionId']) > 36) {
            return false;
        }
        if (strlen($this->container['authenticationTransactionId']) > 20) {
            return false;
        }
        if (strlen($this->container['authenticationType']) > 2) {
            return false;
        }
        if (strlen($this->container['challengeCancelCode']) > 2) {
            return false;
        }
        if (strlen($this->container['effectiveAuthenticationType']) > 2) {
            return false;
        }
        if (strlen($this->container['directoryServerErrorCode']) > 3) {
            return false;
        }
        if (strlen($this->container['directoryServerErrorDescription']) > 4096) {
            return false;
        }
        if (strlen($this->container['interactionCounter']) > 2) {
            return false;
        }
        if (strlen($this->container['signedParesStatusReason']) > 2) {
            return false;
        }
        if (strlen($this->container['sdkTransactionId']) > 36) {
            return false;
        }
        if ($this->container['signedPares'] === null) {
            return false;
        }
        if (strlen($this->container['threeDSServerTransactionId']) > 36) {
            return false;
        }
        if (strlen($this->container['whiteListStatus']) > 1) {
            return false;
        }
        if (strlen($this->container['whiteListStatusSource']) > 2) {
            return false;
        }
        return true;
    }


    /**
     * Gets acsRenderingType
     * @return string
     */
    public function getAcsRenderingType()
    {
        return $this->container['acsRenderingType'];
    }

    /**
     * Sets acsRenderingType
     * @param string $acsRenderingType Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK.
     * @return $this
     */
    public function setAcsRenderingType($acsRenderingType)
    {
        $this->container['acsRenderingType'] = $acsRenderingType;

        return $this;
    }

    /**
     * Gets acsTransactionId
     * @return string
     */
    public function getAcsTransactionId()
    {
        return $this->container['acsTransactionId'];
    }

    /**
     * Sets acsTransactionId
     * @param string $acsTransactionId Unique transaction identifier assigned by the ACS to identify a single transaction.
     * @return $this
     */
    public function setAcsTransactionId($acsTransactionId)
    {
        if (!is_null($acsTransactionId) && (strlen($acsTransactionId) > 36)) {
            throw new \InvalidArgumentException('invalid length for $acsTransactionId when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 36.');
        }

        $this->container['acsTransactionId'] = $acsTransactionId;

        return $this;
    }

    /**
     * Gets authenticationTransactionId
     * @return string
     */
    public function getAuthenticationTransactionId()
    {
        return $this->container['authenticationTransactionId'];
    }

    /**
     * Sets authenticationTransactionId
     * @param string $authenticationTransactionId Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service.
     * @return $this
     */
    public function setAuthenticationTransactionId($authenticationTransactionId)
    {
        if (!is_null($authenticationTransactionId) && (strlen($authenticationTransactionId) > 20)) {
            throw new \InvalidArgumentException('invalid length for $authenticationTransactionId when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 20.');
        }

        $this->container['authenticationTransactionId'] = $authenticationTransactionId;

        return $this;
    }

    /**
     * Gets authenticationType
     * @return string
     */
    public function getAuthenticationType()
    {
        return $this->container['authenticationType'];
    }

    /**
     * Sets authenticationType
     * @param string $authenticationType Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time.
     * @return $this
     */
    public function setAuthenticationType($authenticationType)
    {
        if (!is_null($authenticationType) && (strlen($authenticationType) > 2)) {
            throw new \InvalidArgumentException('invalid length for $authenticationType when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 2.');
        }

        $this->container['authenticationType'] = $authenticationType;

        return $this;
    }

    /**
     * Gets challengeCancelCode
     * @return string
     */
    public function getChallengeCancelCode()
    {
        return $this->container['challengeCancelCode'];
    }

    /**
     * Sets challengeCancelCode
     * @param string $challengeCancelCode An indicator as to why the transaction was canceled. Possible Values:  - `01`: Cardholder selected Cancel. - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo). - `03`: Transaction Timed Out—Decoupled Authentication - `04`: Transaction timed out at ACS—other timeouts - `05`: Transaction Timed out at ACS - First CReq not received by ACS - `06`: Transaction Error - `07`: Unknown - `08`: Transaction Timed Out at SDK
     * @return $this
     */
    public function setChallengeCancelCode($challengeCancelCode)
    {
        if (!is_null($challengeCancelCode) && (strlen($challengeCancelCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $challengeCancelCode when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 2.');
        }

        $this->container['challengeCancelCode'] = $challengeCancelCode;

        return $this;
    }

    /**
     * Gets effectiveAuthenticationType
     * @return string
     */
    public function getEffectiveAuthenticationType()
    {
        return $this->container['effectiveAuthenticationType'];
    }

    /**
     * Sets effectiveAuthenticationType
     * @param string $effectiveAuthenticationType This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer).
     * @return $this
     */
    public function setEffectiveAuthenticationType($effectiveAuthenticationType)
    {
        if (!is_null($effectiveAuthenticationType) && (strlen($effectiveAuthenticationType) > 2)) {
            throw new \InvalidArgumentException('invalid length for $effectiveAuthenticationType when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 2.');
        }

        $this->container['effectiveAuthenticationType'] = $effectiveAuthenticationType;

        return $this;
    }

    /**
     * Gets directoryServerErrorCode
     * @return string
     */
    public function getDirectoryServerErrorCode()
    {
        return $this->container['directoryServerErrorCode'];
    }

    /**
     * Sets directoryServerErrorCode
     * @param string $directoryServerErrorCode The directory server error code indicating a problem with this transaction.
     * @return $this
     */
    public function setDirectoryServerErrorCode($directoryServerErrorCode)
    {
        if (!is_null($directoryServerErrorCode) && (strlen($directoryServerErrorCode) > 3)) {
            throw new \InvalidArgumentException('invalid length for $directoryServerErrorCode when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 3.');
        }

        $this->container['directoryServerErrorCode'] = $directoryServerErrorCode;

        return $this;
    }

    /**
     * Gets directoryServerErrorDescription
     * @return string
     */
    public function getDirectoryServerErrorDescription()
    {
        return $this->container['directoryServerErrorDescription'];
    }

    /**
     * Sets directoryServerErrorDescription
     * @param string $directoryServerErrorDescription Directory server text and additional detail about the error for this transaction.
     * @return $this
     */
    public function setDirectoryServerErrorDescription($directoryServerErrorDescription)
    {
        if (!is_null($directoryServerErrorDescription) && (strlen($directoryServerErrorDescription) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $directoryServerErrorDescription when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 4096.');
        }

        $this->container['directoryServerErrorDescription'] = $directoryServerErrorDescription;

        return $this;
    }

    /**
     * Gets interactionCounter
     * @return string
     */
    public function getInteractionCounter()
    {
        return $this->container['interactionCounter'];
    }

    /**
     * Sets interactionCounter
     * @param string $interactionCounter Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button.
     * @return $this
     */
    public function setInteractionCounter($interactionCounter)
    {
        if (!is_null($interactionCounter) && (strlen($interactionCounter) > 2)) {
            throw new \InvalidArgumentException('invalid length for $interactionCounter when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 2.');
        }

        $this->container['interactionCounter'] = $interactionCounter;

        return $this;
    }

    /**
     * Gets signedParesStatusReason
     * @return string
     */
    public function getSignedParesStatusReason()
    {
        return $this->container['signedParesStatusReason'];
    }

    /**
     * Sets signedParesStatusReason
     * @param string $signedParesStatusReason Provides additional information as to why the PAResStatus has a specific value.
     * @return $this
     */
    public function setSignedParesStatusReason($signedParesStatusReason)
    {
        if (!is_null($signedParesStatusReason) && (strlen($signedParesStatusReason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $signedParesStatusReason when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 2.');
        }

        $this->container['signedParesStatusReason'] = $signedParesStatusReason;

        return $this;
    }

    /**
     * Gets sdkTransactionId
     * @return string
     */
    public function getSdkTransactionId()
    {
        return $this->container['sdkTransactionId'];
    }

    /**
     * Sets sdkTransactionId
     * @param string $sdkTransactionId SDK unique transaction identifier that is generated on each new transaction.
     * @return $this
     */
    public function setSdkTransactionId($sdkTransactionId)
    {
        if (!is_null($sdkTransactionId) && (strlen($sdkTransactionId) > 36)) {
            throw new \InvalidArgumentException('invalid length for $sdkTransactionId when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 36.');
        }

        $this->container['sdkTransactionId'] = $sdkTransactionId;

        return $this;
    }

    /**
     * Gets signedPares
     * @return string
     */
    public function getSignedPares()
    {
        return $this->container['signedPares'];
    }

    /**
     * Sets signedPares
     * @param string $signedPares Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \"Storing Payer Authentication Data,\" page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request.
     * @return $this
     */
    public function setSignedPares($signedPares)
    {
        $this->container['signedPares'] = $signedPares;

        return $this;
    }

    /**
     * Gets threeDSServerTransactionId
     * @return string
     */
    public function getThreeDSServerTransactionId()
    {
        return $this->container['threeDSServerTransactionId'];
    }

    /**
     * Sets threeDSServerTransactionId
     * @param string $threeDSServerTransactionId Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
     * @return $this
     */
    public function setThreeDSServerTransactionId($threeDSServerTransactionId)
    {
        if (!is_null($threeDSServerTransactionId) && (strlen($threeDSServerTransactionId) > 36)) {
            throw new \InvalidArgumentException('invalid length for $threeDSServerTransactionId when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 36.');
        }

        $this->container['threeDSServerTransactionId'] = $threeDSServerTransactionId;

        return $this;
    }

    /**
     * Gets whiteListStatus
     * @return string
     */
    public function getWhiteListStatus()
    {
        return $this->container['whiteListStatus'];
    }

    /**
     * Sets whiteListStatus
     * @param string $whiteListStatus Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder
     * @return $this
     */
    public function setWhiteListStatus($whiteListStatus)
    {
        if (!is_null($whiteListStatus) && (strlen($whiteListStatus) > 1)) {
            throw new \InvalidArgumentException('invalid length for $whiteListStatus when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 1.');
        }

        $this->container['whiteListStatus'] = $whiteListStatus;

        return $this;
    }

    /**
     * Gets whiteListStatusSource
     * @return string
     */
    public function getWhiteListStatusSource()
    {
        return $this->container['whiteListStatusSource'];
    }

    /**
     * Sets whiteListStatusSource
     * @param string $whiteListStatusSource This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS
     * @return $this
     */
    public function setWhiteListStatusSource($whiteListStatusSource)
    {
        if (!is_null($whiteListStatusSource) && (strlen($whiteListStatusSource) > 2)) {
            throw new \InvalidArgumentException('invalid length for $whiteListStatusSource when calling Riskv1authenticationresultsConsumerAuthenticationInformation., must be smaller than or equal to 2.');
        }

        $this->container['whiteListStatusSource'] = $whiteListStatusSource;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


