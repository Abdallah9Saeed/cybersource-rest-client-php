<?php
/**
 * Riskv1authenticationsConsumerAuthenticationInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Riskv1authenticationsConsumerAuthenticationInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Riskv1authenticationsConsumerAuthenticationInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'riskv1authentications_consumerAuthenticationInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alternateAuthenticationData' => 'string',
        'alternateAuthenticationDate' => 'string',
        'alternateAuthenticationMethod' => 'string',
        'authenticationTransactionId' => 'string',
        'challengeCode' => 'string',
        'customerCardAlias' => 'string',
        'defaultCard' => 'bool',
        'installmentTotalCount' => 'int',
        'marketingOptIn' => 'bool',
        'marketingSource' => 'string',
        'mcc' => 'string',
        'messageCategory' => 'string',
        'npaCode' => 'string',
        'overridePaymentMethod' => 'string',
        'productCode' => 'string',
        'requestorId' => 'string',
        'requestorName' => 'string',
        'referenceId' => 'string',
        'transactionMode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alternateAuthenticationData' => null,
        'alternateAuthenticationDate' => null,
        'alternateAuthenticationMethod' => null,
        'authenticationTransactionId' => null,
        'challengeCode' => null,
        'customerCardAlias' => null,
        'defaultCard' => null,
        'installmentTotalCount' => null,
        'marketingOptIn' => null,
        'marketingSource' => null,
        'mcc' => null,
        'messageCategory' => null,
        'npaCode' => null,
        'overridePaymentMethod' => null,
        'productCode' => null,
        'requestorId' => null,
        'requestorName' => null,
        'referenceId' => null,
        'transactionMode' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'alternateAuthenticationData' => 'alternateAuthenticationData',
        'alternateAuthenticationDate' => 'alternateAuthenticationDate',
        'alternateAuthenticationMethod' => 'alternateAuthenticationMethod',
        'authenticationTransactionId' => 'authenticationTransactionId',
        'challengeCode' => 'challengeCode',
        'customerCardAlias' => 'customerCardAlias',
        'defaultCard' => 'defaultCard',
        'installmentTotalCount' => 'installmentTotalCount',
        'marketingOptIn' => 'marketingOptIn',
        'marketingSource' => 'marketingSource',
        'mcc' => 'mcc',
        'messageCategory' => 'messageCategory',
        'npaCode' => 'npaCode',
        'overridePaymentMethod' => 'overridePaymentMethod',
        'productCode' => 'productCode',
        'requestorId' => 'requestorId',
        'requestorName' => 'requestorName',
        'referenceId' => 'referenceId',
        'transactionMode' => 'transactionMode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'alternateAuthenticationData' => 'setAlternateAuthenticationData',
        'alternateAuthenticationDate' => 'setAlternateAuthenticationDate',
        'alternateAuthenticationMethod' => 'setAlternateAuthenticationMethod',
        'authenticationTransactionId' => 'setAuthenticationTransactionId',
        'challengeCode' => 'setChallengeCode',
        'customerCardAlias' => 'setCustomerCardAlias',
        'defaultCard' => 'setDefaultCard',
        'installmentTotalCount' => 'setInstallmentTotalCount',
        'marketingOptIn' => 'setMarketingOptIn',
        'marketingSource' => 'setMarketingSource',
        'mcc' => 'setMcc',
        'messageCategory' => 'setMessageCategory',
        'npaCode' => 'setNpaCode',
        'overridePaymentMethod' => 'setOverridePaymentMethod',
        'productCode' => 'setProductCode',
        'requestorId' => 'setRequestorId',
        'requestorName' => 'setRequestorName',
        'referenceId' => 'setReferenceId',
        'transactionMode' => 'setTransactionMode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'alternateAuthenticationData' => 'getAlternateAuthenticationData',
        'alternateAuthenticationDate' => 'getAlternateAuthenticationDate',
        'alternateAuthenticationMethod' => 'getAlternateAuthenticationMethod',
        'authenticationTransactionId' => 'getAuthenticationTransactionId',
        'challengeCode' => 'getChallengeCode',
        'customerCardAlias' => 'getCustomerCardAlias',
        'defaultCard' => 'getDefaultCard',
        'installmentTotalCount' => 'getInstallmentTotalCount',
        'marketingOptIn' => 'getMarketingOptIn',
        'marketingSource' => 'getMarketingSource',
        'mcc' => 'getMcc',
        'messageCategory' => 'getMessageCategory',
        'npaCode' => 'getNpaCode',
        'overridePaymentMethod' => 'getOverridePaymentMethod',
        'productCode' => 'getProductCode',
        'requestorId' => 'getRequestorId',
        'requestorName' => 'getRequestorName',
        'referenceId' => 'getReferenceId',
        'transactionMode' => 'getTransactionMode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alternateAuthenticationData'] = isset($data['alternateAuthenticationData']) ? $data['alternateAuthenticationData'] : null;
        $this->container['alternateAuthenticationDate'] = isset($data['alternateAuthenticationDate']) ? $data['alternateAuthenticationDate'] : null;
        $this->container['alternateAuthenticationMethod'] = isset($data['alternateAuthenticationMethod']) ? $data['alternateAuthenticationMethod'] : null;
        $this->container['authenticationTransactionId'] = isset($data['authenticationTransactionId']) ? $data['authenticationTransactionId'] : null;
        $this->container['challengeCode'] = isset($data['challengeCode']) ? $data['challengeCode'] : null;
        $this->container['customerCardAlias'] = isset($data['customerCardAlias']) ? $data['customerCardAlias'] : null;
        $this->container['defaultCard'] = isset($data['defaultCard']) ? $data['defaultCard'] : null;
        $this->container['installmentTotalCount'] = isset($data['installmentTotalCount']) ? $data['installmentTotalCount'] : null;
        $this->container['marketingOptIn'] = isset($data['marketingOptIn']) ? $data['marketingOptIn'] : null;
        $this->container['marketingSource'] = isset($data['marketingSource']) ? $data['marketingSource'] : null;
        $this->container['mcc'] = isset($data['mcc']) ? $data['mcc'] : null;
        $this->container['messageCategory'] = isset($data['messageCategory']) ? $data['messageCategory'] : null;
        $this->container['npaCode'] = isset($data['npaCode']) ? $data['npaCode'] : null;
        $this->container['overridePaymentMethod'] = isset($data['overridePaymentMethod']) ? $data['overridePaymentMethod'] : null;
        $this->container['productCode'] = isset($data['productCode']) ? $data['productCode'] : null;
        $this->container['requestorId'] = isset($data['requestorId']) ? $data['requestorId'] : null;
        $this->container['requestorName'] = isset($data['requestorName']) ? $data['requestorName'] : null;
        $this->container['referenceId'] = isset($data['referenceId']) ? $data['referenceId'] : null;
        $this->container['transactionMode'] = isset($data['transactionMode']) ? $data['transactionMode'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['alternateAuthenticationData']) && (strlen($this->container['alternateAuthenticationData']) > 2048)) {
            $invalid_properties[] = "invalid value for 'alternateAuthenticationData', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['alternateAuthenticationDate']) && (strlen($this->container['alternateAuthenticationDate']) > 14)) {
            $invalid_properties[] = "invalid value for 'alternateAuthenticationDate', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['authenticationTransactionId']) && (strlen($this->container['authenticationTransactionId']) > 20)) {
            $invalid_properties[] = "invalid value for 'authenticationTransactionId', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['customerCardAlias']) && (strlen($this->container['customerCardAlias']) > 128)) {
            $invalid_properties[] = "invalid value for 'customerCardAlias', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['marketingSource']) && (strlen($this->container['marketingSource']) > 40)) {
            $invalid_properties[] = "invalid value for 'marketingSource', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['mcc'] === null) {
            $invalid_properties[] = "'mcc' can't be null";
        }
        if ((strlen($this->container['mcc']) > 4)) {
            $invalid_properties[] = "invalid value for 'mcc', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['npaCode']) && (strlen($this->container['npaCode']) > 2)) {
            $invalid_properties[] = "invalid value for 'npaCode', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['productCode']) && (strlen($this->container['productCode']) > 3)) {
            $invalid_properties[] = "invalid value for 'productCode', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['requestorId']) && (strlen($this->container['requestorId']) > 35)) {
            $invalid_properties[] = "invalid value for 'requestorId', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['requestorName']) && (strlen($this->container['requestorName']) > 40)) {
            $invalid_properties[] = "invalid value for 'requestorName', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['referenceId'] === null) {
            $invalid_properties[] = "'referenceId' can't be null";
        }
        if ((strlen($this->container['referenceId']) > 50)) {
            $invalid_properties[] = "invalid value for 'referenceId', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['transactionMode'] === null) {
            $invalid_properties[] = "'transactionMode' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['alternateAuthenticationData']) > 2048) {
            return false;
        }
        if (strlen($this->container['alternateAuthenticationDate']) > 14) {
            return false;
        }
        if (strlen($this->container['authenticationTransactionId']) > 20) {
            return false;
        }
        if (strlen($this->container['customerCardAlias']) > 128) {
            return false;
        }
        if (strlen($this->container['marketingSource']) > 40) {
            return false;
        }
        if ($this->container['mcc'] === null) {
            return false;
        }
        if (strlen($this->container['mcc']) > 4) {
            return false;
        }
        if (strlen($this->container['npaCode']) > 2) {
            return false;
        }
        if (strlen($this->container['productCode']) > 3) {
            return false;
        }
        if (strlen($this->container['requestorId']) > 35) {
            return false;
        }
        if (strlen($this->container['requestorName']) > 40) {
            return false;
        }
        if ($this->container['referenceId'] === null) {
            return false;
        }
        if (strlen($this->container['referenceId']) > 50) {
            return false;
        }
        if ($this->container['transactionMode'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets alternateAuthenticationData
     * @return string
     */
    public function getAlternateAuthenticationData()
    {
        return $this->container['alternateAuthenticationData'];
    }

    /**
     * Sets alternateAuthenticationData
     * @param string $alternateAuthenticationData Data that documents and supports a specific authentication process.
     * @return $this
     */
    public function setAlternateAuthenticationData($alternateAuthenticationData)
    {
        if (!is_null($alternateAuthenticationData) && (strlen($alternateAuthenticationData) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $alternateAuthenticationData when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 2048.');
        }

        $this->container['alternateAuthenticationData'] = $alternateAuthenticationData;

        return $this;
    }

    /**
     * Gets alternateAuthenticationDate
     * @return string
     */
    public function getAlternateAuthenticationDate()
    {
        return $this->container['alternateAuthenticationDate'];
    }

    /**
     * Sets alternateAuthenticationDate
     * @param string $alternateAuthenticationDate Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM
     * @return $this
     */
    public function setAlternateAuthenticationDate($alternateAuthenticationDate)
    {
        if (!is_null($alternateAuthenticationDate) && (strlen($alternateAuthenticationDate) > 14)) {
            throw new \InvalidArgumentException('invalid length for $alternateAuthenticationDate when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 14.');
        }

        $this->container['alternateAuthenticationDate'] = $alternateAuthenticationDate;

        return $this;
    }

    /**
     * Gets alternateAuthenticationMethod
     * @return string
     */
    public function getAlternateAuthenticationMethod()
    {
        return $this->container['alternateAuthenticationMethod'];
    }

    /**
     * Sets alternateAuthenticationMethod
     * @param string $alternateAuthenticationMethod Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - `01`: No authentication occurred - `02`: Login using merchant system credentials - `03`: Login using Federated ID - `04`: Login using FIDO Authenticator
     * @return $this
     */
    public function setAlternateAuthenticationMethod($alternateAuthenticationMethod)
    {
        $this->container['alternateAuthenticationMethod'] = $alternateAuthenticationMethod;

        return $this;
    }

    /**
     * Gets authenticationTransactionId
     * @return string
     */
    public function getAuthenticationTransactionId()
    {
        return $this->container['authenticationTransactionId'];
    }

    /**
     * Sets authenticationTransactionId
     * @param string $authenticationTransactionId Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service.
     * @return $this
     */
    public function setAuthenticationTransactionId($authenticationTransactionId)
    {
        if (!is_null($authenticationTransactionId) && (strlen($authenticationTransactionId) > 20)) {
            throw new \InvalidArgumentException('invalid length for $authenticationTransactionId when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 20.');
        }

        $this->container['authenticationTransactionId'] = $authenticationTransactionId;

        return $this;
    }

    /**
     * Gets challengeCode
     * @return string
     */
    public function getChallengeCode()
    {
        return $this->container['challengeCode'];
    }

    /**
     * Sets challengeCode
     * @param string $challengeCode Possible values: - `01`: No preference - `02`: No challenge request - `03`: Challenge requested (3D Secure requestor preference) - `04`: Challenge requested (mandate) - `05-79`: Reserved for EMVCo future use (values invalid until defined by EMVCo) - `80-99`: Reserved for DS use  For details, see `pa_challenge_code` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     * @return $this
     */
    public function setChallengeCode($challengeCode)
    {
        $this->container['challengeCode'] = $challengeCode;

        return $this;
    }

    /**
     * Gets customerCardAlias
     * @return string
     */
    public function getCustomerCardAlias()
    {
        return $this->container['customerCardAlias'];
    }

    /**
     * Sets customerCardAlias
     * @param string $customerCardAlias An alias that uniquely identifies the customer's account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings.
     * @return $this
     */
    public function setCustomerCardAlias($customerCardAlias)
    {
        if (!is_null($customerCardAlias) && (strlen($customerCardAlias) > 128)) {
            throw new \InvalidArgumentException('invalid length for $customerCardAlias when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 128.');
        }

        $this->container['customerCardAlias'] = $customerCardAlias;

        return $this;
    }

    /**
     * Gets defaultCard
     * @return bool
     */
    public function getDefaultCard()
    {
        return $this->container['defaultCard'];
    }

    /**
     * Sets defaultCard
     * @param bool $defaultCard Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy.
     * @return $this
     */
    public function setDefaultCard($defaultCard)
    {
        $this->container['defaultCard'] = $defaultCard;

        return $this;
    }

    /**
     * Gets installmentTotalCount
     * @return int
     */
    public function getInstallmentTotalCount()
    {
        return $this->container['installmentTotalCount'];
    }

    /**
     * Sets installmentTotalCount
     * @param int $installmentTotalCount An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments.
     * @return $this
     */
    public function setInstallmentTotalCount($installmentTotalCount)
    {
        $this->container['installmentTotalCount'] = $installmentTotalCount;

        return $this;
    }

    /**
     * Gets marketingOptIn
     * @return bool
     */
    public function getMarketingOptIn()
    {
        return $this->container['marketingOptIn'];
    }

    /**
     * Sets marketingOptIn
     * @param bool $marketingOptIn Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy.
     * @return $this
     */
    public function setMarketingOptIn($marketingOptIn)
    {
        $this->container['marketingOptIn'] = $marketingOptIn;

        return $this;
    }

    /**
     * Gets marketingSource
     * @return string
     */
    public function getMarketingSource()
    {
        return $this->container['marketingSource'];
    }

    /**
     * Sets marketingSource
     * @param string $marketingSource Indicates origin of the marketing offer. Recommended for Discover ProtectBuy.
     * @return $this
     */
    public function setMarketingSource($marketingSource)
    {
        if (!is_null($marketingSource) && (strlen($marketingSource) > 40)) {
            throw new \InvalidArgumentException('invalid length for $marketingSource when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 40.');
        }

        $this->container['marketingSource'] = $marketingSource;

        return $this;
    }

    /**
     * Gets mcc
     * @return string
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     * @param string $mcc Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     * @return $this
     */
    public function setMcc($mcc)
    {
        if ((strlen($mcc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $mcc when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 4.');
        }

        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets messageCategory
     * @return string
     */
    public function getMessageCategory()
    {
        return $this->container['messageCategory'];
    }

    /**
     * Sets messageCategory
     * @param string $messageCategory Category of the message for a specific use case. Possible values:  - `01`: PA- payment authentication - `02`: NPA- non-payment authentication - `03-79`: Reserved for EMVCo future use (values invalid until defined by EMVCo) - `80-99`: Reserved for DS use
     * @return $this
     */
    public function setMessageCategory($messageCategory)
    {
        $this->container['messageCategory'] = $messageCategory;

        return $this;
    }

    /**
     * Gets npaCode
     * @return string
     */
    public function getNpaCode()
    {
        return $this->container['npaCode'];
    }

    /**
     * Sets npaCode
     * @param string $npaCode Non-Payer Authentication Indicator. Possible values: - `01`: Add card - `02`: Maintain card information - `03`: Cardholder verification for EMV token - `04-80` Reserved for EMVCo - `80-90` Reserved DS
     * @return $this
     */
    public function setNpaCode($npaCode)
    {
        if (!is_null($npaCode) && (strlen($npaCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $npaCode when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 2.');
        }

        $this->container['npaCode'] = $npaCode;

        return $this;
    }

    /**
     * Gets overridePaymentMethod
     * @return string
     */
    public function getOverridePaymentMethod()
    {
        return $this->container['overridePaymentMethod'];
    }

    /**
     * Sets overridePaymentMethod
     * @param string $overridePaymentMethod Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - `NA`: Not applicable. Do not override other payment types that are specified in the request. - `CR`: Credit card. - `DB`: Debit card. - `VSAVR`: Visa Vale Refeicao - `VSAVA`: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     * @return $this
     */
    public function setOverridePaymentMethod($overridePaymentMethod)
    {
        $this->container['overridePaymentMethod'] = $overridePaymentMethod;

        return $this;
    }

    /**
     * Gets productCode
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     * @param string $productCode Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - `ACC`: Accommodation Rental - `ACF`: Account funding - `CHA`: Check acceptance - `DIG`: Digital Goods - `DSP`: Cash Dispensing - `GAS`: Fuel - `GEN`: General Retail - `LUX`: Luxury Retail - `PAL`: Prepaid activation and load - `PHY`: Goods or services purchase - `QCT`: Quasi-cash transaction - `REN`: Car Rental - `RES`: Restaurant - `SVC`: Services - `TBD`: Other - `TRA`: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     * @return $this
     */
    public function setProductCode($productCode)
    {
        if (!is_null($productCode) && (strlen($productCode) > 3)) {
            throw new \InvalidArgumentException('invalid length for $productCode when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 3.');
        }

        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets requestorId
     * @return string
     */
    public function getRequestorId()
    {
        return $this->container['requestorId'];
    }

    /**
     * Sets requestorId
     * @param string $requestorId Cardinal's directory server assigned 3DS Requestor ID value
     * @return $this
     */
    public function setRequestorId($requestorId)
    {
        if (!is_null($requestorId) && (strlen($requestorId) > 35)) {
            throw new \InvalidArgumentException('invalid length for $requestorId when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 35.');
        }

        $this->container['requestorId'] = $requestorId;

        return $this;
    }

    /**
     * Gets requestorName
     * @return string
     */
    public function getRequestorName()
    {
        return $this->container['requestorName'];
    }

    /**
     * Sets requestorName
     * @param string $requestorName Cardinal's directory server assigned 3DS Requestor Name value
     * @return $this
     */
    public function setRequestorName($requestorName)
    {
        if (!is_null($requestorName) && (strlen($requestorName) > 40)) {
            throw new \InvalidArgumentException('invalid length for $requestorName when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 40.');
        }

        $this->container['requestorName'] = $requestorName;

        return $this;
    }

    /**
     * Gets referenceId
     * @return string
     */
    public function getReferenceId()
    {
        return $this->container['referenceId'];
    }

    /**
     * Sets referenceId
     * @param string $referenceId Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration.
     * @return $this
     */
    public function setReferenceId($referenceId)
    {
        if ((strlen($referenceId) > 50)) {
            throw new \InvalidArgumentException('invalid length for $referenceId when calling Riskv1authenticationsConsumerAuthenticationInformation., must be smaller than or equal to 50.');
        }

        $this->container['referenceId'] = $referenceId;

        return $this;
    }

    /**
     * Gets transactionMode
     * @return string
     */
    public function getTransactionMode()
    {
        return $this->container['transactionMode'];
    }

    /**
     * Sets transactionMode
     * @param string $transactionMode Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values: - `MOTO` - MOTO (Mail Order Telephone Order) - `RETAIL` - Retail - `ECOMMERCE` - eCommerce - `MOBILE` - Mobile Device - `TABLET` - Tablet
     * @return $this
     */
    public function setTransactionMode($transactionMode)
    {
        $this->container['transactionMode'] = $transactionMode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


