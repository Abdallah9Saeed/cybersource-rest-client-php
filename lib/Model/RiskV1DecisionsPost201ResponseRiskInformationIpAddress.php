<?php
/**
 * RiskV1DecisionsPost201ResponseRiskInformationIpAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * RiskV1DecisionsPost201ResponseRiskInformationIpAddress Class Doc Comment
 *
 * @category    Class
 * @description Contains detailed response information about the customer&#39;s IP address.
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RiskV1DecisionsPost201ResponseRiskInformationIpAddress implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'riskV1DecisionsPost201Response_riskInformation_ipAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'anonymizerStatus' => 'string',
        'city' => 'string',
        'country' => 'string',
        'state' => 'string',
        'routingMethod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'anonymizerStatus' => null,
        'city' => null,
        'country' => null,
        'state' => null,
        'routingMethod' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'anonymizerStatus' => 'anonymizerStatus',
        'city' => 'city',
        'country' => 'country',
        'state' => 'state',
        'routingMethod' => 'routingMethod'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'anonymizerStatus' => 'setAnonymizerStatus',
        'city' => 'setCity',
        'country' => 'setCountry',
        'state' => 'setState',
        'routingMethod' => 'setRoutingMethod'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'anonymizerStatus' => 'getAnonymizerStatus',
        'city' => 'getCity',
        'country' => 'getCountry',
        'state' => 'getState',
        'routingMethod' => 'getRoutingMethod'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['anonymizerStatus'] = isset($data['anonymizerStatus']) ? $data['anonymizerStatus'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['routingMethod'] = isset($data['routingMethod']) ? $data['routingMethod'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['anonymizerStatus']) && (strlen($this->container['anonymizerStatus']) > 255)) {
            $invalid_properties[] = "invalid value for 'anonymizerStatus', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 255)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['country']) && (strlen($this->container['country']) > 255)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['state']) && (strlen($this->container['state']) > 255)) {
            $invalid_properties[] = "invalid value for 'state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['routingMethod']) && (strlen($this->container['routingMethod']) > 255)) {
            $invalid_properties[] = "invalid value for 'routingMethod', the character length must be smaller than or equal to 255.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['anonymizerStatus']) > 255) {
            return false;
        }
        if (strlen($this->container['city']) > 255) {
            return false;
        }
        if (strlen($this->container['country']) > 255) {
            return false;
        }
        if (strlen($this->container['state']) > 255) {
            return false;
        }
        if (strlen($this->container['routingMethod']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets anonymizerStatus
     * @return string
     */
    public function getAnonymizerStatus()
    {
        return $this->container['anonymizerStatus'];
    }

    /**
     * Sets anonymizerStatus
     * @param string $anonymizerStatus Indicates whether the transaction IP address is associated with a known anonymous proxy. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for 'Reply Fields': \"afsReply_ipAnonymizerStatus\".
     * @return $this
     */
    public function setAnonymizerStatus($anonymizerStatus)
    {
        if (!is_null($anonymizerStatus) && (strlen($anonymizerStatus) > 255)) {
            throw new \InvalidArgumentException('invalid length for $anonymizerStatus when calling RiskV1DecisionsPost201ResponseRiskInformationIpAddress., must be smaller than or equal to 255.');
        }

        $this->container['anonymizerStatus'] = $anonymizerStatus;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city Name of the city decoded from the IP address used directly or indirectly by the customer to send the order.
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $city when calling RiskV1DecisionsPost201ResponseRiskInformationIpAddress., must be smaller than or equal to 255.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Name of the country decoded from the IP address used directly or indirectly by the customer to send the order.
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (strlen($country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $country when calling RiskV1DecisionsPost201ResponseRiskInformationIpAddress., must be smaller than or equal to 255.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state Name of the state decoded from the IP address used directly or indirectly by the customer to send the order.
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (strlen($state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $state when calling RiskV1DecisionsPost201ResponseRiskInformationIpAddress., must be smaller than or equal to 255.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets routingMethod
     * @return string
     */
    public function getRoutingMethod()
    {
        return $this->container['routingMethod'];
    }

    /**
     * Sets routingMethod
     * @param string $routingMethod Routing method decoded from the IP address used directly or indirectly by the customer to send the order. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for 'Reply Fields': \"afsService_ipRoutingMethod \".
     * @return $this
     */
    public function setRoutingMethod($routingMethod)
    {
        if (!is_null($routingMethod) && (strlen($routingMethod) > 255)) {
            throw new \InvalidArgumentException('invalid length for $routingMethod when calling RiskV1DecisionsPost201ResponseRiskInformationIpAddress., must be smaller than or equal to 255.');
        }

        $this->container['routingMethod'] = $routingMethod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


